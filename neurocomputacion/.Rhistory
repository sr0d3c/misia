suma <- 4+5
suma
runif(3)
runif(10,4,5)
runif(3,4,5)
(a <- runif(10,4,5))
ls()
objects()
rm(list=ls())
mean(a)
(a <- runif(3))
mean(a)
x <- 4+5
# Un numero se almacena en R como un vector de longitud 1
x
x[2] <- 10
x
rnorm(2, mean = 1:2)
rnorm(5, mean = 1:2)
rnorm(5, mean = 1:4)
rnorm(5, mean = 1:4)
rnorm(5, mean = 1:4)
rnorm(5, mean = 1:2)
# En R se usa la función list() para crear una lista
(alumno <- list("Jose",47,TRUE))
# str permite acceder al contenido de la lista
str(alumno)
length(alumno)
mode(alumno)
class(alumno)
# La funcion names permite crear o cambiar los nombres de los elementos de una lista
names(alumno) <- c("nombre","edad","estado")
alumno
names(alumno)
# La indexacion se realiza mediante los operadores [], que permiten obtener un elemento en formato lista
alumno[1]
# La indexacion se realiza mediante los operadores [], que permiten obtener un elemento en formato lista
alumno[2]
# o se puede realizar la idexacion mediante el operador [[]] o $ que permiten recuperar los elementos de la lista en el formato de almacenamiento original
alumno[[1]]
mode(alumno[[1]])
alumno$nombre
# la funcion data.frame se utiliza para crear objetos del tipo data.frame
datos <- data.frame(nombre = c("jose","juan","pedro"), edad = c(47,54,34), estado = c(TRUE,FALSE,TRUE))
View(datos)
datos
str(datos)
mode(datos)
class(datos)
datos[1,2]
datos[1,]
datos[,1]
datos[1,"edad"]
# La funcion matrix se usa para construir matrices en R
runif(10)
mat <- matrix(nrow = 2, ncol = 5)
dim(mat)
nrow(mat)
ncol(mat)
rownames(mat)
# Divide el gráfico en 2 figuras
par(mfrow = c(1,2))
# Histogramas de las distribuciones normales con media = 0 y std = 1
hist(rnorm(20))
hist(rnorm(2000))
hist(rnorm(20000))
# Histogramas de las distribuciones normales con media = 0 y std = 1
hist(rnorm(20))
# ACTIVIDAD
x <- runif(20,min = 0,max = 10)
? runif
# Matriz de dos dimensiones
M <- matrix(seq(1,16),4,4)
View(M)
# Aplica min a las filas
apply(M, 1, min)
M
View(M)
? max
# Aplica max a las columnas
apply(M, 2, max)
# Array de 3 dimensiones
M <- array(seq(12),dim = c(4,4,2))
M
# Aplica sum sobre la 2da y 3ra dimension del array
apply(M, 1, sum)
# Array de 3 dimensiones
M <- array(seq(32),dim = c(4,4,2))
M
# Aplica sum sobre la 2da y 3ra dimension del array
apply(M, 1, sum)
# Aplica sum sobre la 3ra dimension
apply(M,,c(1,2),sum)
# Aplica sum sobre la 3ra dimension
apply(M,c(1,2),sum)
# LAPPLY
# Lista con 3 elementos, cada uno de ellos un vector
x <- list(a = 1, b = 1:3, c = 10:100)
View(x)
lapply(x, FUN = length)
lapply(x, FUN = sum)
# SAPPLY
y <- list(a = 1, b = 1:3, c = 10:100)
# Comparar el resultado con la versión anterior de lapply
sapply(y, FUN = length)
# Obtendríamos el mismo resultados usando unlist(lapply...)
unlist(lapply(x, FUN = length))
sapply(x, FUN = sum)
# Lectura de un fichero
datos <- read.table(file = "datos_icb.txt",header = TRUE)
setwd("C:/Users/sergi/Desktop/Code/Neurocomputacion")
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
