suma <- 4+5
suma
runif(3)
runif(10,4,5)
runif(3,4,5)
(a <- runif(10,4,5))
ls()
objects()
rm(list=ls())
mean(a)
(a <- runif(3))
mean(a)
x <- 4+5
# Un numero se almacena en R como un vector de longitud 1
x
x[2] <- 10
x
rnorm(2, mean = 1:2)
rnorm(5, mean = 1:2)
rnorm(5, mean = 1:4)
rnorm(5, mean = 1:4)
rnorm(5, mean = 1:4)
rnorm(5, mean = 1:2)
# En R se usa la función list() para crear una lista
(alumno <- list("Jose",47,TRUE))
# str permite acceder al contenido de la lista
str(alumno)
length(alumno)
mode(alumno)
class(alumno)
# La funcion names permite crear o cambiar los nombres de los elementos de una lista
names(alumno) <- c("nombre","edad","estado")
alumno
names(alumno)
# La indexacion se realiza mediante los operadores [], que permiten obtener un elemento en formato lista
alumno[1]
# La indexacion se realiza mediante los operadores [], que permiten obtener un elemento en formato lista
alumno[2]
# o se puede realizar la idexacion mediante el operador [[]] o $ que permiten recuperar los elementos de la lista en el formato de almacenamiento original
alumno[[1]]
mode(alumno[[1]])
alumno$nombre
# la funcion data.frame se utiliza para crear objetos del tipo data.frame
datos <- data.frame(nombre = c("jose","juan","pedro"), edad = c(47,54,34), estado = c(TRUE,FALSE,TRUE))
View(datos)
datos
str(datos)
mode(datos)
class(datos)
datos[1,2]
datos[1,]
datos[,1]
datos[1,"edad"]
# La funcion matrix se usa para construir matrices en R
runif(10)
mat <- matrix(nrow = 2, ncol = 5)
dim(mat)
nrow(mat)
ncol(mat)
rownames(mat)
# Divide el gráfico en 2 figuras
par(mfrow = c(1,2))
# Histogramas de las distribuciones normales con media = 0 y std = 1
hist(rnorm(20))
hist(rnorm(2000))
hist(rnorm(20000))
# Histogramas de las distribuciones normales con media = 0 y std = 1
hist(rnorm(20))
# ACTIVIDAD
x <- runif(20,min = 0,max = 10)
? runif
# Matriz de dos dimensiones
M <- matrix(seq(1,16),4,4)
View(M)
# Aplica min a las filas
apply(M, 1, min)
M
View(M)
? max
# Aplica max a las columnas
apply(M, 2, max)
# Array de 3 dimensiones
M <- array(seq(12),dim = c(4,4,2))
M
# Aplica sum sobre la 2da y 3ra dimension del array
apply(M, 1, sum)
# Array de 3 dimensiones
M <- array(seq(32),dim = c(4,4,2))
M
# Aplica sum sobre la 2da y 3ra dimension del array
apply(M, 1, sum)
# Aplica sum sobre la 3ra dimension
apply(M,,c(1,2),sum)
# Aplica sum sobre la 3ra dimension
apply(M,c(1,2),sum)
# LAPPLY
# Lista con 3 elementos, cada uno de ellos un vector
x <- list(a = 1, b = 1:3, c = 10:100)
View(x)
lapply(x, FUN = length)
lapply(x, FUN = sum)
# SAPPLY
y <- list(a = 1, b = 1:3, c = 10:100)
# Comparar el resultado con la versión anterior de lapply
sapply(y, FUN = length)
# Obtendríamos el mismo resultados usando unlist(lapply...)
unlist(lapply(x, FUN = length))
sapply(x, FUN = sum)
# Lectura de un fichero
datos <- read.table(file = "datos_icb.txt",header = TRUE)
install caret
install.packages("caret")
install.packages("rtools")
install.packages("FSelector")
workingDir <- "C:/Users/sergi/Desktop/Code/Neurocomputacion/Actividad_4"
setwd(workingDir)
datos <- read.table(file=paste(workingDir,"datos_icb.txt",sep="/"), header=T, sep=" ", dec=".")
folds <- createFolds(datos$recid, k=10)
crossVal <- function(x){
auc.tr <- c()
auc.ts <- c()
fold.tr <- datos[-x, ]
fold.ts <- datos[x, ]
rlog <- glm(as.factor(fold.tr$recid) ~ .,data = fold.tr,family = binomial("logit"))
#rlog.ts <- glm(as.factor(fold.ts$recid) ~ .,data = fold.ts,family = binomial("logit"))
pred.tr <- predict(rlog, type = "response",newdata=fold.tr)
pred.ts <- predict(rlog, type = "response", newdata=fold.ts)
recid.tr <- ifelse(fold.tr$recid == "SI", 1, 0)
recid.ts <- ifelse(fold.ts$recid == "SI", 1, 0)
auc.tr <- c(auc(recid.tr,pred.tr,levels = c(0, 1), direction = "<"))
auc.ts <- c(auc(recid.ts,pred.ts,levels = c(0, 1), direction = "<"))
list(auc.tr, auc.ts)
}
result <- sapply(folds, crossVal)
X_auc.cross.tr <- mean(unlist(result[1,]))
X_auc.cross.ts <- mean(unlist(result[2,]))
print(X_auc.cross.ts)
print(X_auc.cross.tr)
workingDir <- "C:/Users/sergi/Desktop/Code/Neurocomputacion/Actividad_4"
setwd(workingDir)
datos <- read.table(file=paste(workingDir,"datos_icb.txt",sep="/"), header=T, sep=" ", dec=".")
folds <- createFolds(datos$recid, k=10)
library(caret)
library(rminer)
library(nnet)
library(pROC)
workingDir <- "C:/Users/sergi/Desktop/Code/Neurocomputacion/Actividad_4"
setwd(workingDir)
datos <- read.table(file=paste(workingDir,"datos_icb.txt",sep="/"), header=T, sep=" ", dec=".")
folds <- createFolds(datos$recid, k=10)
crossVal <- function(x){
auc.tr <- c()
auc.ts <- c()
fold.tr <- datos[-x, ]
fold.ts <- datos[x, ]
rlog <- glm(as.factor(fold.tr$recid) ~ .,data = fold.tr,family = binomial("logit"))
#rlog.ts <- glm(as.factor(fold.ts$recid) ~ .,data = fold.ts,family = binomial("logit"))
pred.tr <- predict(rlog, type = "response",newdata=fold.tr)
pred.ts <- predict(rlog, type = "response", newdata=fold.ts)
recid.tr <- ifelse(fold.tr$recid == "SI", 1, 0)
recid.ts <- ifelse(fold.ts$recid == "SI", 1, 0)
auc.tr <- c(auc(recid.tr,pred.tr,levels = c(0, 1), direction = "<"))
auc.ts <- c(auc(recid.ts,pred.ts,levels = c(0, 1), direction = "<"))
list(auc.tr, auc.ts)
}
result <- sapply(folds, crossVal)
X_auc.cross.tr <- mean(unlist(result[1,]))
X_auc.cross.ts <- mean(unlist(result[2,]))
print(X_auc.cross.ts)
print(X_auc.cross.tr)
repHOut <- function(x, n, esq_val, neu){
auc.tr <- c()
auc.ts <- c()
for (i in 1:n){
ho <- holdout(x$recid, ratio = esq_val)
train <- x[ho$tr,]
test <- x[ho$ts,]
fit <- nnet((recid=="SI") ~ ., data = train, size=neu,maxit=10000, decay=0.001)
predicted.tr <- predict(fit, newdata=train, type="raw")
predicted.ts <- predict(fit, newdata=test, type="raw")
recid.tr <- ifelse(fold.tr$recid == "SI", 1, 0)
recid.ts <- ifelse(fold.ts$recid == "SI", 1, 0)
auc.HO.tr <- c(auc(recid.tr,pred.tr,levels = c(0, 1), direction = "<"))
auc.HO.ts <- c(auc(recid.ts,pred.ts,levels = c(0, 1), direction = "<"))
}
list(X_acc.tr = mean(acc.tr), X_acc.ts = mean(acc.ts))
}
result.HO <- repHOut(datos, n=30, esq_val = 2/3, neu = 3)
print(result.HO)
repHOut <- function(x, n, esq_val, neu){
auc.tr <- c()
auc.ts <- c()
for (i in 1:n){
ho <- holdout(x$recid, ratio = esq_val)
train <- x[ho$tr,]
test <- x[ho$ts,]
fit <- nnet((recid=="SI") ~ ., data = train, size=neu,maxit=10000, decay=0.001)
predicted.tr <- predict(fit, newdata=train, type="raw")
predicted.ts <- predict(fit, newdata=test, type="raw")
recid.tr <- ifelse(train$recid == "SI", 1, 0)
recid.ts <- ifelse(test$recid == "SI", 1, 0)
auc.HO.tr <- c(auc(recid.tr,pred.tr,levels = c(0, 1), direction = "<"))
auc.HO.ts <- c(auc(recid.ts,pred.ts,levels = c(0, 1), direction = "<"))
}
list(X_acc.tr = mean(acc.tr), X_acc.ts = mean(acc.ts))
}
result.HO <- repHOut(datos, n=30, esq_val = 2/3, neu = 3)
print(result.HO)
repHOut <- function(x, n, esq_val, neu){
auc.tr <- c()
auc.ts <- c()
for (i in 1:n){
ho <- holdout(x$recid, ratio = esq_val)
train <- x[ho$tr,]
test <- x[ho$ts,]
fit <- nnet((recid=="SI") ~ ., data = train, size=neu,maxit=10000, decay=0.001)
predicted.tr <- predict(fit, newdata=train, type="raw")
predicted.ts <- predict(fit, newdata=test, type="raw")
recid.tr <- ifelse(train$recid == "SI", 1, 0)
recid.ts <- ifelse(test$recid == "SI", 1, 0)
auc.HO.tr <- c(auc(recid.tr,predicted.tr,levels = c(0, 1), direction = "<"))
auc.HO.ts <- c(auc(recid.ts,predicted.ts,levels = c(0, 1), direction = "<"))
}
list(X_acc.tr = mean(acc.tr), X_acc.ts = mean(acc.ts))
}
result.HO <- repHOut(datos, n=30, esq_val = 2/3, neu = 3)
print(result.HO)
repHOut <- function(x, n, esq_val, neu){
auc.tr <- c()
auc.ts <- c()
for (i in 1:n){
ho <- holdout(x$recid, ratio = esq_val)
train <- x[ho$tr,]
test <- x[ho$ts,]
fit <- nnet((recid=="SI") ~ ., data = train, size=neu,maxit=10000, decay=0.001)
predicted.tr <- predict(fit, newdata=train, type="raw")
predicted.ts <- predict(fit, newdata=test, type="raw")
recid.tr <- ifelse(train$recid == "SI", 1, 0)
recid.ts <- ifelse(test$recid == "SI", 1, 0)
auc.HO.tr <- c(auc(recid.tr,predicted.tr,levels = c(0, 1), direction = "<"))
auc.HO.ts <- c(auc(recid.ts,predicted.ts,levels = c(0, 1), direction = "<"))
}
list(X_acc.tr = mean(auc.HO.tr), X_acc.ts = mean(auc.HO.ts))
}
result.HO <- repHOut(datos, n=30, esq_val = 2/3, neu = 3)
print(result.HO)
View(result.HO)
View(result)
install.packages("FSelector")
knitr::opts_chunk$set(echo = TRUE)
workingDir <- "C:/Users/sergi/Desktop/Code/Neurocomputacion/Actividad_4"
setwd(workingDir)
datos <- read.table(file=paste(workingDir,"datos_icb.txt",sep="/"), header=T, sep=" ", dec=".")
library(caret)
folds <- createFolds(datos$recid, k=10)
crossVal <- function(x){
auc.tr <- c()
auc.ts <- c()
fold.tr <- datos[-x, ]
fold.ts <- datos[x, ]
rlog <- glm(as.factor(fold.tr$recid) ~ .,data = fold.tr,family = binomial("logit"))
pred.tr <- predict(rlog, type = "response",newdata=fold.tr)
pred.ts <- predict(rlog, type = "response", newdata=fold.ts)
recid.tr <- ifelse(fold.tr$recid == "SI", 1, 0)
recid.ts <- ifelse(fold.ts$recid == "SI", 1, 0)
auc.tr <- c(auc(recid.tr,pred.tr,levels = c(0, 1), direction = "<"))
auc.ts <- c(auc(recid.ts,pred.ts,levels = c(0, 1), direction = "<"))
list(auc.tr, auc.ts)
}
repHOut <- function(x, n, esq_val, neu){
auc.tr <- c()
auc.ts <- c()
for (i in 1:n){
ho <- holdout(x$recid, ratio = esq_val)
train <- x[ho$tr,]
test <- x[ho$ts,]
fit <- nnet((recid=="SI") ~ ., data = train, size=neu,maxit=10000, decay=0.001)
predicted.tr <- predict(fit, newdata=train, type="raw")
predicted.ts <- predict(fit, newdata=test, type="raw")
recid.tr <- ifelse(train$recid == "SI", 1, 0)
recid.ts <- ifelse(test$recid == "SI", 1, 0)
auc.HO.tr <- c(auc(recid.tr,predicted.tr,levels = c(0, 1), direction = "<"))
auc.HO.ts <- c(auc(recid.ts,predicted.ts,levels = c(0, 1), direction = "<"))
}
list(X_acc.tr = mean(auc.HO.tr), X_acc.ts = mean(auc.HO.ts))
}
result <- sapply(folds, crossVal)
X_auc.cross.tr <- mean(unlist(result[1,]))
X_auc.cross.ts <- mean(unlist(result[2,]))
result.HO <- repHOut(datos, n=30, esq_val = 2/3, neu = 3)
print(table(X_auc.cross.tr, X_auc.cross.ts))
print(result.HO)
result <- sapply(folds, crossVal)
X_auc.cross.tr <- mean(unlist(result[1,]))
X_auc.cross.ts <- mean(unlist(result[2,]))
result.HO <- repHOut(datos, n=30, esq_val = 2/3, neu = 3)
print(X_auc.cross.tr)
print(X_auc.cross.ts)
print(result.HO)
result <- sapply(folds, crossVal)
X_auc.cross.tr <- mean(unlist(result[1,]))
X_auc.cross.ts <- mean(unlist(result[2,]))
result.HO <- repHOut(datos, n=30, esq_val = 2/3, neu = 3)
print(X_auc.cross.tr)
print(X_auc.cross.ts)
print(result.HO)
library(nnet)
repHOut <- function(x, n, esq_val, neu){
auc.tr <- c()
auc.ts <- c()
for (i in 1:n){
ho <- holdout(x$recid, ratio = esq_val)
train <- x[ho$tr,]
test <- x[ho$ts,]
fit <- nnet((recid=="SI") ~ ., data = train, size=neu,maxit=10000, decay=0.001)
predicted.tr <- predict(fit, newdata=train, type="raw")
predicted.ts <- predict(fit, newdata=test, type="raw")
recid.tr <- ifelse(train$recid == "SI", 1, 0)
recid.ts <- ifelse(test$recid == "SI", 1, 0)
auc.HO.tr <- c(auc(recid.tr,predicted.tr,levels = c(0, 1), direction = "<"))
auc.HO.ts <- c(auc(recid.ts,predicted.ts,levels = c(0, 1), direction = "<"))
}
list(X_auc.tr = mean(auc.HO.tr), X_auc.ts = mean(auc.HO.ts))
}
result <- sapply(folds, crossVal)
X_auc.cross.tr <- mean(unlist(result[1,]))
X_auc.cross.ts <- mean(unlist(result[2,]))
result.HO <- repHOut(datos, n=30, esq_val = 2/3, neu = 3)
print(X_auc.cross.tr)
print(X_auc.cross.ts)
print(result.HO)
result <- sapply(folds, crossVal)
X_auc.cross.tr <- mean(unlist(result[1,]))
X_auc.cross.ts <- mean(unlist(result[2,]))
result.HO <- repHOut(datos, n=30, esq_val = 2/3, neu = 3)
print(X_auc.cross.tr)
print(X_auc.cross.ts)
print(result.HO)
library(nnet)
repHOut <- function(x, n, esq_val, neu){
auc.tr <- c()
auc.ts <- c()
for (i in 1:n){
ho <- holdout(x$recid, ratio = esq_val)
train <- x[ho$tr,]
test <- x[ho$ts,]
fit <- nnet((recid=="SI") ~ ., data = train, size=neu,maxit=10000, decay=0.001)
predicted.tr <- predict(fit, newdata=train, type="raw")
predicted.ts <- predict(fit, newdata=test, type="raw")
recid.tr <- ifelse(train$recid == "SI", 1, 0)
recid.ts <- ifelse(test$recid == "SI", 1, 0)
auc.HO.tr <- c(auc(recid.tr,predicted.tr,levels = c(0, 1), direction = "<"))
auc.HO.ts <- c(auc(recid.ts,predicted.ts,levels = c(0, 1), direction = "<"))
}
list(X_auc.HO.tr = mean(auc.HO.tr), X_auc.HO.ts = mean(auc.HO.ts))
}
result <- sapply(folds, crossVal)
X_auc.cross.tr <- mean(unlist(result[1,]))
X_auc.cross.ts <- mean(unlist(result[2,]))
result.HO <- repHOut(datos, n=30, esq_val = 2/3, neu = 3)
print("Valor promedio AUC Cross.tr: ", X_auc.cross.tr)
print("Valor promedio AUC Cross.tr: ", X_auc.cross.ts)
print("Valor promedio AUC HO: ", result.HO)
result <- sapply(folds, crossVal)
X_auc.cross.tr <- mean(unlist(result[1,]))
X_auc.cross.ts <- mean(unlist(result[2,]))
result.HO <- repHOut(datos, n=30, esq_val = 2/3, neu = 3)
cat("Valor promedio AUC Cross.tr: ", X_auc.cross.tr)
cat("Valor promedio AUC Cross.tr: ", X_auc.cross.ts)
cat("Valor promedio AUC HO: ", result.HO)
result <- sapply(folds, crossVal)
X_auc.cross.tr <- mean(unlist(result[1,]))
X_auc.cross.ts <- mean(unlist(result[2,]))
result.HO <- repHOut(datos, n=30, esq_val = 2/3, neu = 3)
sprintf("Valor promedio AUC Cross.tr: \n", X_auc.cross.tr)
sprintf("Valor promedio AUC Cross.tr: \n", X_auc.cross.ts)
sprintf("Valor promedio AUC HO: \n", result.HO)
result <- sapply(folds, crossVal)
X_auc.cross.tr <- mean(unlist(result[1,]))
X_auc.cross.ts <- mean(unlist(result[2,]))
result.HO <- repHOut(datos, n=30, esq_val = 2/3, neu = 3)
paste("Valor promedio AUC Cross.tr: ", X_auc.cross.tr)
paste("Valor promedio AUC Cross.tr: \n", X_auc.cross.ts)
paste("Valor promedio AUC HO: \n", result.HO)
result <- sapply(folds, crossVal)
X_auc.cross.tr <- mean(unlist(result[1,]))
X_auc.cross.ts <- mean(unlist(result[2,]))
result.HO <- repHOut(datos, n=30, esq_val = 2/3, neu = 3)
paste("Valor promedio AUC Cross.tr: ", X_auc.cross.tr)
paste("Valor promedio AUC Cross.tr: ", X_auc.cross.ts)
paste("Valor promedio AUC HO: ", result.HO)
result <- sapply(folds, crossVal)
X_auc.cross.tr <- mean(unlist(result[1,]))
X_auc.cross.ts <- mean(unlist(result[2,]))
result.HO <- repHOut(datos, n=30, esq_val = 2/3, neu = 3)
paste("Valor promedio AUC Cross.tr: ", X_auc.cross.tr)
paste("Valor promedio AUC Cross.tr: ", X_auc.cross.ts)
paste("Valor promedio AUC HO.tr: ", result.HO[1])
paste("Valor promedio AUC HO.tr: ", result.HO[2])
subset <- cfs(recid~.,datos)
library(FSelector)
subset <- cfs(recid~.,datos)
library(FSelector)
subset <- cfs(recid~.,datos)
print(information.gain(recid~.,datos))
library(FSelector)
print(cfs(recid~.,datos))
print(information.gain(recid~.,datos))
crossVal <- function(x){
auc.tr <- c()
auc.ts <- c()
fold.tr <- datos[-x, ]
fold.ts <- datos[x, ]
rlog <- glm(as.factor(fold.tr$recid) ~ tam+grado+gang+feno,data = fold.tr,family = binomial("logit"))
pred.tr <- predict(rlog, type = "response",newdata=fold.tr)
pred.ts <- predict(rlog, type = "response", newdata=fold.ts)
recid.tr <- ifelse(fold.tr$recid == "SI", 1, 0)
recid.ts <- ifelse(fold.ts$recid == "SI", 1, 0)
auc.tr <- c(auc(recid.tr,pred.tr,levels = c(0, 1), direction = "<"))
auc.ts <- c(auc(recid.ts,pred.ts,levels = c(0, 1), direction = "<"))
list(auc.tr, auc.ts)
}
result <- sapply(folds, crossVal)
X_auc.cross.tr <- mean(unlist(result[1,]))
X_auc.cross.ts <- mean(unlist(result[2,]))
paste("Valor promedio AUC Cross.tr: ", X_auc.cross.tr)
paste("Valor promedio AUC Cross.tr: ", X_auc.cross.ts)
crossVal <- function(x){
auc.tr <- c()
auc.ts <- c()
fold.tr <- datos[-x, ]
fold.ts <- datos[x, ]
rlog <- glm(as.factor(fold.tr$recid) ~ tam+grado+gang+feno,data = fold.tr,family = binomial("logit"))
pred.tr <- predict(rlog, type = "response",newdata=fold.tr)
pred.ts <- predict(rlog, type = "response", newdata=fold.ts)
recid.tr <- ifelse(fold.tr$recid == "SI", 1, 0)
recid.ts <- ifelse(fold.ts$recid == "SI", 1, 0)
auc.tr <- c(auc(recid.tr,pred.tr,levels = c(0, 1), direction = "<"))
auc.ts <- c(auc(recid.ts,pred.ts,levels = c(0, 1), direction = "<"))
list(auc.tr, auc.ts)
}
result <- sapply(folds, crossVal)
X_auc.cross.tr <- mean(unlist(result[1,]))
X_auc.cross.ts <- mean(unlist(result[2,]))
paste("Valor promedio AUC Cross.tr: ", X_auc.cross.tr)
paste("Valor promedio AUC Cross.tr: ", X_auc.cross.ts)
crossVal <- function(x){
auc.tr <- c()
auc.ts <- c()
fold.tr <- datos[-x, ]
fold.ts <- datos[x, ]
rlog <- glm(as.factor(fold.tr$recid) ~ tam+grado+gang+feno,data = fold.tr,family = binomial("logit"))
pred.tr <- predict(rlog, type = "response",newdata=fold.tr)
pred.ts <- predict(rlog, type = "response", newdata=fold.ts)
recid.tr <- ifelse(fold.tr$recid == "SI", 1, 0)
recid.ts <- ifelse(fold.ts$recid == "SI", 1, 0)
auc.tr <- c(auc(recid.tr,pred.tr,levels = c(0, 1), direction = "<"))
auc.ts <- c(auc(recid.ts,pred.ts,levels = c(0, 1), direction = "<"))
list(auc.tr, auc.ts)
}
result <- sapply(folds, crossVal)
X_auc.cross.tr <- mean(unlist(result[1,]))
X_auc.cross.ts <- mean(unlist(result[2,]))
paste("Valor promedio AUC Cross.tr: ", X_auc.cross.tr)
paste("Valor promedio AUC Cross.tr: ", X_auc.cross.ts)
crossVal <- function(x){
auc.tr <- c()
auc.ts <- c()
fold.tr <- datos[-x, ]
fold.ts <- datos[x, ]
rlog <- glm(as.factor(fold.tr$recid) ~ tam+grado+gang+feno,data = fold.tr,family = binomial("logit"))
pred.tr <- predict(rlog, type = "response",newdata=fold.tr)
pred.ts <- predict(rlog, type = "response", newdata=fold.ts)
recid.tr <- ifelse(fold.tr$recid == "SI", 1, 0)
recid.ts <- ifelse(fold.ts$recid == "SI", 1, 0)
auc.tr <- c(auc(recid.tr,pred.tr,levels = c(0, 1), direction = "<"))
auc.ts <- c(auc(recid.ts,pred.ts,levels = c(0, 1), direction = "<"))
list(auc.tr, auc.ts)
}
result <- sapply(folds, crossVal)
X_auc.cross.tr <- mean(unlist(result[1,]))
X_auc.cross.ts <- mean(unlist(result[2,]))
paste("Valor promedio AUC Cross.tr: ", X_auc.cross.tr)
paste("Valor promedio AUC Cross.tr: ", X_auc.cross.ts)
